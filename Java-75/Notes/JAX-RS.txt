Using Jersey-2 in Eclipse
=========================
- intergrate Tomcat Server with Eclipse

1) Create a Maven Project in Eclipse
File > New > Maven Project
  > Next
  > Select "org.apache.maven.archetypes"  maven-archetype-webapp
  > Next
     Group Id	 : co.edureka
     Artifact Id : REST
  > Finish

2) Integrate the Application with Tomcat Server

Right Click on Project > Properties > Targeted Runtime > Check Apache Tomcat from List (or) Integrate a New Runtime Environment


3) Change the JRE System Library of the Project, using the "Build Path" option to Workspace Default JRE


4) In pom.xml - add the additional dependencies for Jersey 2.x

mvnrepository.com > Search for "Jersey Container Servlet" &  "jersey-hk2"

<dependencies>
<dependency>
    <groupId>org.glassfish.jersey.containers</groupId>
    <artifactId>jersey-container-servlet</artifactId>
    <version>2.28</version>
</dependency>
<dependency>
    <groupId>org.glassfish.jersey.inject</groupId>
    <artifactId>jersey-hk2</artifactId>
    <version>2.28</version>
</dependency>
</dependencies>


For Java 11
 <dependency>
   <groupId>javax.xml.bind</groupId>
   <artifactId>jaxb-api</artifactId>
   <version>2.3.0</version>
 </dependency>
	
 <dependency>
   <groupId>javax.activation</groupId>
   <artifactId>activation</artifactId>
   <version>1.1.1</version>
</dependency>


4) src/main/webapp/WEB-INF/web.xml
<web-app>
<servlet>  
  <servlet-name>jersey</servlet-name>  
  <servlet-class>org.glassfish.jersey.servlet.ServletContainer</servlet-class>  
   <init-param>  
    <param-name>jersey.config.server.provider.packages</param-name>  
    <param-value>co.edureka</param-value>  
   </init-param>  
   <load-on-startup>1</load-on-startup>  
 </servlet>  

 <servlet-mapping>  
   <servlet-name>jersey</servlet-name>  
   <url-pattern>/rest/*</url-pattern>  
 </servlet-mapping>  
</web-app>



5) Create a Package with name : co.edureka
	
6) Create a Java class in co.edureka package with name : EdurekaServices
EdurekaServices.java

package co.edureka;

import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;

@Path("/edureka")
public class EdurekaServices 
{
 @GET
 @Produces("text/html")
 public String localService() {
  return "<h2>Local Customer Service Center</h2>";		
 }

 @GET
 @Path("/nri")
 @Produces("text/html")
 public String nriService() {
  return "<h2>NRI Customer Service Center</h2>";		
 }
}

6) index.jsp

<html>
<head>
<style>
#wrapper{
  width:70%;
  margin:100px auto;
  padding:20px;
  box-shadow:0 0 10px black;
  text-align:center;
  border-radius:20px;
}
a:link, a:visited {
    background:linear-gradient(45deg,black 50%, orangered 50%);
    color: white;
    text-decoration: none;
    font-size: 18px;
    display:inline-block;
    width:220px;
    padding:10px;
    border-radius:15px;
    margin-right:40px;
}

a:hover {
    box-shadow:0 0 10px black;
    background:linear-gradient(45deg,darkblue 50%, darkred 50%);
}
</style>
</head>
<body>
	<div id="wrapper">
		<a href="rest/edureka">Local Service</a> 
		<a href="rest/edureka/intl">International Service</a>
	</div>
</body>
</html>



7) Run As > Run on Server

8) http://localhost:65535/REST2/rest/edureka
   http://localhost:65535/REST2/rest/edureka/nri

*****************************************************************

Consumer Application using Maven
================================
1) Create a Simple Maven project for Consumer.
Artifact ID: Consumer

2) Add th following dependencies 
<dependencies>
  <dependency>
    <groupId>org.glassfish.jersey.core</groupId>
    <artifactId>jersey-client</artifactId>
    <version>2.28</version>
  </dependency>
  <dependency>
    <groupId>org.glassfish.jersey.inject</groupId>
    <artifactId>jersey-hk2</artifactId>
    <version>2.28</version>
  </dependency>
  <dependency>
    <groupId>javax.activation</groupId>
    <artifactId>activation</artifactId>
    <version>1.1.1</version>
  </dependency>
</dependencies>


3) Create Client Test class.
ClientTest.java

import javax.ws.rs.client.Client;
import javax.ws.rs.client.ClientBuilder;
import javax.ws.rs.client.Invocation;
import javax.ws.rs.client.WebTarget;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

public class ClientTest 
{
  public static void main(String[] args) 
  {
    String baseURL = "http://localhost:65535/REST1";

    // 1. Create on empty Client object
    Client client = ClientBuilder.newClient();		
		
    // 2. add url to Client, get WebTarget
    WebTarget webTarget = client.target(baseURL);
		
   // 3. make request call to a resource
   Invocation.Builder invocationBuilder =  webTarget.path("/rest/edureka/hello").request(MediaType.TEXT_HTML);
   Response response = invocationBuilder.get();		
		
   // 4. read entity from response object
   String resp = response.readEntity(String.class);
		
   // 5. print response
   System.out.println(resp);
		
   // 6. print extra details
   System.out.println(response.getStatus());
   System.out.println(response.getStatusInfo());

  System.out.println();
  String str = webTarget.path("rest").path("edureka/hello").request().accept(MediaType.TEXT_HTML).get(String.class);
  System.out.println(str);
 }
}



*****************************************************************


@PathParam Annotation
---------------------

In RESTful (JAX-RS) web services @PathParam annotation will be used to bind RESTful URL parameter values to the method arguments.

EdurekaServices.java
-------------------
package co.edureka;

import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Response;

@Path("/edureka")
public class EdurekaServices {
 @GET
 @Path("{name}/{course}")
 @Produces("text/html")
 public String enquiry(@PathParam("name") String name, @PathParam("course") String course) {
  return "<h2>Customer Name - " + name + "<br>Course Name - " + course + "</h2>";		
 }
}

Right click on your project > Run As > Run on Server

http://localhost:65535/REST2/rest/edureka/sunil/java

******************************************************

@QueryParam Annotation
======================

In RESTful web services (JAX-RS) @QueryParam annotation will be used to get the query parameters from the URL, 

Consider this URL:
http://localhost:65535/REST2/rest/edureka/enquiry?name=Sunil&course=Java
Here query parameters are name, course and their values are Sunil, Java

package co.edureka;

import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.Response;

@Path("/edureka")
public class EdurekaService {
 @GET
 @Path("/enquiry")
 @Produces("text/html")
 public String enquiry1(@QueryParam("name") String name, @QueryParam("course") String crs) {
   String output = "<h2>Customer Name : "+name+"<br> Course Name : "+crs+"</h2>";
   return output; 
 }
}


http://localhost:65535/REST2/rest/edureka/enquiry?name=Sunil&course=Java

****************************************

@FormParam Annotation
=====================
By using @FormParam annotation, RESTful web service would accept HTML form parameters sent by the client in the POST request and bind them to the method variables. Generally @FormParam will come into picture when client send the data in POST request, if it is the GET request @QueryParam would be the best choice.


1) Registration Page - registration.html

<html>
<head>
<title>edureka | student registration</title>
<style>
table {
	width: 450px;
	margin: 100px auto;
	padding: 10px;
	background: linear-gradient(45deg, black 50%, orangered 50%);
	border-radius: 15px;
	box-shadow: 0 0 10px black;
	color: white;
	font-size: 20px;
}

input {
	font-size: 20px;
	display:block;
}

tr {
	height: 45px;
}
</style>
</head>
<body>
    <form action="rest/edureka/register" method="post">
	<table>
	<caption style="color:black;margin:10px;">Student | Registration</caption>
		<tr>
			<td>Name</td>
			<td><input type="text" size=20 autofocus required name="name_field"></td>
		</tr>

		<tr>
			<td>Age</td>
			<td><input type="text" name="age_field" size=20></td>			
		</tr>

		<tr>
			<td>Address</td>
			<td><input type="text" name="addr_field" size=20></span></td>
		</tr>
		
		<tr>
		  <td colspan=2 align=center>
		  <input type="submit" value="R E G I S T E R">
		  </td>
		</tr>
	</table>
	</form>
</body>
</html>

2) Create a New Java class in co.edureka package : Registration
Registration.java

package co.edureka;

import javax.ws.rs.FormParam;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Response;

@Path("/edureka")
public class Registration {
 @POST
 @Path("/registerCustomer")
 @Produces("text/html")
 public String register(@FormParam("name") String name, @FormParam("age") String age, @FormParam("addr") String address) 
 {
   String output = "<div style=color:red;font-size:25px;>Registration Success::<br> Name - <u>"+name+"</u><br> Age - <u>"+age+"</u><br>Address - <u>"+address+"</u><hr></div>";
   return output;
 }
}


	@POST
	@Produces("application/json")
	@Path("/register")
	public String registerStudent(@FormParam("name_field")String name, @FormParam("age_field")String age, @FormParam("addr_field")String addr)
	{		
		String json_response = "{\"Name\":\""+name+"\",\"Age\":"+age+",\"Address\":\""+addr+"\"}";
		return json_response;
	}


---------------------------------------------------------
Sending JSON Response from Provider to Consumer

1) Add the additional dependency in pom.xml
<dependency>
  <groupId>org.glassfish.jersey.media</groupId>
  <artifactId>jersey-media-json-jackson</artifactId>
  <version>2.28</version>
</dependency>

2) Create a class - Employee

package co.sit;

import java.io.Serializable;
public class Employee implements Serializable
{
  int empno;
  String name;

  public Employee(int empno, String name) {
   this.empno = empno;
   this.name = name;
  }
  //define getters and setters	
}


@GET
@Path("/employees")
@Produces("application/json")
public List<Employee> getAllEmployees() 
{
   ArrayList<Employee> employeesList = new ArrayList<Employee>();
    	     
   employeesList.add(new Employee(101, "Sunil Joseph"));
   employeesList.add(new Employee(201, "Anirudh"));
   employeesList.add(new Employee(301, "Jefferey"));	     
	    
   return employeesList;
}

	OR

@GET
@Path("/employees")
@Produces(MediaType.APPLICATION_JSON)
public Response getAllEmployees() 
{
    ArrayList<Employee> employeesList = new ArrayList<Employee>();
	    	     
    employeesList.add(new Employee(101, "Sunil Joseph"));
    employeesList.add(new Employee(201, "Anirudh"));
    employeesList.add(new Employee(301, "Jefferey"));
	     
    GenericEntity<List<Employee>> myEntity = new GenericEntity<List<Employee>>(employeesList) {};

    return Response.status(200).entity(myEntity).build();
}


//We send a response containing the JSON data to the client. A message body writer transforms the list of Employees into JSON


  Sending JSON Request
    @POST
    @Consumes("application/json")
    @Produces("text/html")
    @Path("/posting")
    public String postMessage(Employee emp) throws Exception{        
        System.out.println("Emp ID = "+emp.getEmpno());
        System.out.println("Emp Name  = "+emp.getName());
        
        return "received employee details";
    }	